- Class: meta
  Course: imbrseaR
  Lesson: Data_Handling_part_2
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text 
  Output: In the previous lesson, you discussed about how to read in data in different format (txt and csv) in R. That's great, but we can do better. In this tutorial, you will learn about create simple data structure, operate on them, and perform basic subsetting.
  
- Class: text 
  Output: At the end, you should be able to do some basic data manipulation in R. Are you ready!!! 
  
- Class: text 
  Output: Now that you have our data into R. You can do some manipulation with the data. However, for the following discussion we will keep things simple so that you get the ideas/concept much easily.
  
- Class: text 
  Output: The first concept in data manipulation you will learn in R will be on how to create SIMPLE VECTOR or sequence of numbers or character. 
  
- Class: text 
  Output: For example, If I tell you to list the first five numbers we have. How do you go about that in R. In this case, we are talking about a sequences of numbers right?
  
- Class: text 
  Output: R is so simple enough that it provide us with what is called a sequence function named 'seq(from = , to = , by = )'. Between, the parentheses, you can place whatever number you want. 
  
- Class: text 
  Output: Let give a concrete example to see this in action, say you want to generate the first ten number - '1:10', you can do by using the 'seq()' command.
  
- Class: cmd_question
  Output: Generate sequence number '1' to '10' using 'seq(from = 1, to = 10, by = 1)' in the command line.
  CorrectAnswer: seq(from = 1, to = 10, by = 1)
  AnswerTests: any_of_exprs('seq(from = 1, to = 10, by = 1)', 'seq(0, 10, 1)') 
  Hint: The answer is in the question. 
  
- Class: cmd_question
  Output: Now generate sequence number '10' to '100' using 'seq()' in the command line and assign the numbers to an object 'x'.
  CorrectAnswer: x = seq(from = 10, to = 100, by = 1)
  AnswerTests: any_of_exprs('x = seq(from = 10, to = 100, by = 1)', 'x <- seq(from = 10, to = 100, by = 1)', 'x = seq(10, 100, 1)', 'x <- seq(10, 100, 1)') 
  Hint: The answer is in the question. 
  
- Class: text 
  Output: Alternatively, you can create this vector using ':' command between the numbers. Just type '1:10' and you get similar result as above! 

- Class: cmd_question
  Output: Generate sequence number '1' to '10' using ':' in the command line.
  CorrectAnswer: 1:10
  AnswerTests: omnitest(correctExpr = '1:10') 
  Hint: The answer is in the question. 
  
- Class: text 
  Output: The only reason you the need the 'seq()' is that you can modify how many step you want from the sequence using the 'by =' argument. 
  
- Class: text 
  Output: For example, say you want to generate a number '1' to '10' with increment of '2'. Meaning the number changes 'by' 2. We can do that using 'seq(from = 1, to = 10, by = 2)'. Let try that in the console. 
  
- Class: cmd_question
  Output: Generate sequence number '1' to '10' by an increment of '2'
  CorrectAnswer: seq(from = 1, to = 10, by = 2)
  AnswerTests: any_of_exprs('seq(from = 1, to = 10, by = 2)', 'seq(1, 10, 2)') 
  Hint: The answer is in the question. 
  
- Class: text
  Output: Now that you understand how to Generate a sequence, Let learn how to generate string character. A string/character is shown with the quotation symbol "< STRING >"
  
- Class: text
  Output: To create a character sequence in R you will have to manually write the string. You can do that using 'c()' command with means either 'concatenate' or simple 'create'. 
  
- Class: text
  Output: Say, for example you wanted to create a vector of animals in the ocean, Then you can use 'c("Whale", "Gobies", "Ray", "Turtle")'. Let create this in the console.
  
- Class: cmd_question
  Output: Generate a vector of Ocean animals using 'c()' containing "Whale", "Gobies", "Ray", "Turtle". Assign the object to 'ocean_animals'
  CorrectAnswer: ocean_animals <- c("Whale", "Gobies", "Ray", "Turtle")
  AnswerTests: any_of_exprs('ocean_animals <- c("Whale", "Gobies", "Ray", "Turtle")', 'ocean_animals = c("Whale", "Gobies", "Ray", "Turtle")')
  Hint: The answer is in the question. 
  
- Class: text
  Output: Now, let move to another useful data handling concept that is crucial in R. It is called INDEXING. 
  
- Class: text
  Output: Indexing is basically the way you get individuals object or group of objects from a vector in R. Remember our 'ocean_animals' example, say if you want to get only the first animals in the object, how do you do that in R?
  
- Class: text
  Output: Well it turns out that R follows a simple pattern of Indexing which if you understand, can make your life easier. Let put this into action and see if you can get the first object.
  
- Class: text
  Output: To index in R, you use the block parentheses '[]' in front of the object we want to index. For example 'ocean_animals[]'
  
- Class: text
  Output: Since we know the first ('1') animals is 'Whale' we can get that by typing the number '1' in between the block parentheses. Let try that at the console prompt.
  
- Class: figure
  Output: See the illustrated concept in the plot viewer.
  Figure: number_index_illustrated.R

- Class: cmd_question
  Output: Get the first animal in the vector 'ocean_animals' using the '[]' and the number '1' inside the bracket.
  CorrectAnswer: ocean_animals[1]
  AnswerTests: omnitest(correctExpr = 'ocean_animals[1]') 
  Hint: The answer is in the question. 
  
- Class: cmd_question
  Output: Get the last animal - 'Turtle' in the vector 'ocean_animals' using the '[]' and the number '4' inside the bracket.
  CorrectAnswer: ocean_animals[4]
  AnswerTests: omnitest(correctExpr = 'ocean_animals[4]') 
  Hint: The answer is in the question.

- Class: text
  Output: Good job. You can even get two or more object at the same time with method. For example say we want the first and the last animal, then the index is 1 and 4.   
  
- Class: text
  Output: To that in R, we need to place this numbers in the 'c()' command for R to know that we are dealing with more that one index. So in this case, we use '[c(1,4)]'

- Class: cmd_question
  Output: Get the second and third animal - 'Gobies' and 'Ray' in the vector 'ocean_animals' using the '[]' and the number corresponding to the animal.
  CorrectAnswer: ocean_animals[c(2,3)]
  AnswerTests: omnitest(correctExpr = 'ocean_animals[c(2,3)]') 
  Hint: Type the number inside the square parentheses '[]'. 
  
- Class: text
  Output: That will do for now, The next lesson will look at a new technique that will greatly improve your data-handling skills - it is called "LOGICAL INDEXING".

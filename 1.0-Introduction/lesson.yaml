- Class: meta
  Course: imbrseaR
  Lesson: Introduction
  Author: Osman Crespo, Cóilín Minto
  Type: Standard
  Organization: IMBRSea
  Version: 2.4.5
  
- Class: text
  Output: Welcome to this short and interactive R Introduction course for IMBRSea students. Anytime you see "..." hit enter. When you see a ">" (called a prompt) you are expected to type in an answer either in the form of a number or of some R code followed by enter.
  
- Class: text
  Output: This first lesson teaches the basic and general features of R to help you understand how this programming language works. 
  
- Class: text
  Output: The first thing to keep in mind is that R is a programming language and we need to learn how to communicate with it. 
 
- Class: text
  Output: Let's start with a simple question to get the first feel of typing things in the R console. This is where you are prompted (with the prompt !) to enter code.
 
- Class: exact_question
  Output: How many limbs does an octopus have?
  CorrectAnswer: 8
  AnswerTests: omnitest(correctVal = 8)
  Hint: 7+1...

- Class: text
  Output: Now, let's think of R as a calculator that you can use to get the result of basic calculations ...  
  
- Class: exact_question
  Output: For example, type 10 + 7 and press enter.
  CorrectAnswer: 17
  AnswerTests: omnitest(correctVal = 17)
  Hint: Type "+" between values

- Class: text
  Output: Now some multiplication ....   
 
- Class: text
  Output: A total of 34 female turtles were observed on a beach during nesting season. We know that, for this species, a female lays an average of 133 eggs each breeding season.
 
- Class: cmd_question
  Output: Multiply 34 by 133 to get the total number of eggs expected for this area.       
  CorrectAnswer: 34*133
  AnswerTests: any_of_exprs('34*133', '34 * 133')
  Hint: Type "*" between values

- Class: text
  Output: Using R this way only displays the results in the console. But, what if you want to use this result in further calculations? For this you need to ask R to save the result in "memory:" R will assign the result to an named object ...  

- Class: text
  Output: Note, R is case-sensitive so make sure you use the right case. For example, "eggs" is different from "Eggs". "eggs" is start with lower case "e" while "Eggs" start with "E". So beware.  
  
- Class: text
  Output: So instead of repeating the calculation every time we want the result, we can create an object called "eggs" and assign the calculation result to it. To assign a value to an object in R we use the "assignement operator" (<-).
  
- Class: cmd_question
  Output: Let's do that! To assign the result of 34 * 133 to an object called eggs you should type ; eggs <- 34 * 133
  CorrectAnswer: eggs<-34*133
  AnswerTests: any_of_exprs('eggs<-34*133', 'eggs <- 34*133', 'eggs <- 34 * 133')
  Hint: Type "eggs <- 34 * 133"

- Class: text
  Output:  As you can see, R did not print the output in the console. Remember, we only asked R to create the object "eggs" from that command. The result is not displayed "eggs" now exists in memory. NB - R will also understand if you use the equal symbol (=) to assign values to an object but it is better to stick with the assignment operator.
  
- Class: cmd_question
  Output: Now that we have this object, let's ask R to print the value. Please type eggs.
  CorrectAnswer: eggs
  AnswerTests: omnitest(correctExpr='eggs')
  Hint: Type "eggs"

- Class: text
  Output: Now that we have the object "eggs" containing the expected number of eggs in our study area, let's calculate how many eggs will hatch according to the known average hatching success rate of 90% ...

- Class: cmd_question
  Output: Multiply your "eggs" object by 0.9, the hatching succes rate, and assign the result to an object called "hatch".
  CorrectAnswer: hatch<-eggs*0.9
  AnswerTests: any_of_exprs('hatch<-eggs*0.9', 'hatch <- eggs * 0.9', 'hatch <- eggs*0.9', 'hatch<-0.9*eggs', 'hatch <- 0.9 * eggs', 'hatch <- 0.9*eggs')
  Hint: Type "eggs*0.9" assigning it to "hatch <-"

- Class: cmd_question
  Output: Now simply print the result of your "hatch" object to the console to see how many eggs are expected to successfully hatch.  
  CorrectAnswer: hatch
  AnswerTests: omnitest(correctExpr='hatch')
  Hint: Type "hatch"

- Class: text
  Output: Now you know the very basics of R, how to carry out simple calculations and how to assign your result to an object.
  
- Class: text
  Output: If you want to check which objects are now stored in memory you can use the "ls()" function. This will output the "List of Objects" currently in memory, or more specifically in what is called your "Global Environment". 
  
- Class: cmd_question
  Output: Type ls() to check your current objects.  
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Type; ls()  
  
- Class: text
  Output: Depending on the type of data they contain, your objects will belong to a different "class". In R, real numbers are typically of class "numeric", and whole numbers of class "integer". Besides that, qualitative variables will typically be stored as "factor", and semi-quantitative ones as "ordered factor". Text values will be of class "character".  
  
- Class: text
  Output: To better understand the different classes of object in R, let's create some objects of different class for practice. 
  
- Class: cmd_question
  Output:  To know the class of an object in your environment you can use the "class()" function and put the name of the object inside the round brackets (without the quotes, just like you would at the prompt). Try to ask R what the class of the "hatch" object is.
  CorrectAnswer: class(hatch)
  AnswerTests: omnitest(correctExpr='class(hatch)')
  Hint: Type; class(hatch)  
  
- Class: text
  Output: The "hatch" object is thus of class numeric. Whenever we are writing things between the brackets in a function call were are giving values to that function's arguments. These arguments give us a lot of flexibility in how we use functions in R. You will learn more about these later. For now, let's create an object with character class.
  
- Class: cmd_question
  Output:  Type the name of the species in between quotes ("") and assign it to a object called "sp". The species name is Caretta caretta. 
  CorrectAnswer: sp <- "Caretta caretta"
  AnswerTests: any_of_exprs('sp<-"Caretta caretta"', 'sp <- "Caretta caretta"')
  Hint: Type; sp <- "Caretta caretta"

- Class: cmd_question
  Output: Now, ask R what the class of the "sp" object is.
  CorrectAnswer: class(sp)
  AnswerTests: omnitest(correctExpr='class(sp)')
  Hint: Type; class(sp)    
  
- Class: text
  Output: This new object is of class character. Remember, we must always place the text input in between quotes "" to indicate it is a character value. 
  
- Class: text
  Output: This first lesson is a very basic introduction to the R environment that tries to keep things as simple as possible. Feel free to play around with the different operators and functions presented here and any values and calculations that come in mind. Use R daily and practice, you'll improve quickly !!
  
- Class: video
  Output: Would you like to explore more advanced IMBRSea R material now?
  VideoLink: http://www.imbrsea.eu


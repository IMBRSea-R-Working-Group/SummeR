- Class: meta
  Course: R for Marine Research
  Lesson: Data visualisation
  Author: Valentin Geslin & Coil√≠n Minto
  Type: Standard
  Organization: IMBRSea
  Version: 2.4.5

- Class: text
  Output: Welcome to this introductory course on Data Visualisation with R for Marine research students.

- Class: text
  Output: Data visualisation is an important part of a research project. It allows you to explore the structure and existing relations between your variables before proceding to statistical tests. It allows you to visualise the outcomes of some of the tests that you will perform on your data and, of course to present your data and results in a comprehensive way.

- Class: text
  Output: Base graphics are usually constructed piecemeal, with each aspect of the plot handled separately through a series of function calls. This is often conceptually simpler and allows plotting to mirror the thought process.

- Class: text
  Output: We will start by importing the data set that we will use in this lesson.

- Class: cmd_question
  Output: In order to do so start by typing in your console View(reeffish) 
  CorrectAnswer: View(reeffish)
  AnswerTests: omnitest(correctExpr='View(reeffish)')
  Hint: Type View(reeffish)

- Class: text
  Output: Here we are! You should now see the data frame "reeffish" on your Environment and on your Source pane. As you can see the reeffish is composed of 5 variables (Site, Month, Transect, Species, Abundance), containing 26 values each.
  
- Class: text
  Output: Let's now start to visualise its variables.
  
- Class: cmd_question
  Output: We will begin with the most simple form of plot in R by displaying the values of abundance in the same order as they appear in the data frame by using the command plot(reeffish$Abundance)
  CorrectAnswer: plot(reeffish$Abundance) 
  AnswerTests: any_of_exprs('plot(reeffish$Abundance)', 'plot(reeffish $ Abundance)')
  Hint: Type plot(reeffish$Abundance)

- Class: text
  Output: That is probably your first plot in R. Congratulations! And if not, still well done!

- Class: text
  Output: But as you can see, it is not super informative for us as it shows only the different values taken by the variable "Abundance" displayed in the same order as they appear on this column.

- Class: cmd_question
  Output: To make it more informative we will display a different color by species. Type plot(reeffish$Observation, reeffish$Abundance, col=c("green", "blue", "red"), pch = 19)
  CorrectAnswer: plot(reeffish$Observation, reeffish$Abundance, col=c("green", "blue", "red"), pch = 19) 
  AnswerTests: omnitest(correctExpr='plot(reeffish$Observation, reeffish$Abundance, col=c("green", "blue", "red"), pch = 19)')
  Hint: Type plot(reeffish$Observation, reeffish$Abundance, col=c("green", "blue", "red"), pch = 19)

- Class: cmd_question
  Output: Let's add a legend. Type legend(1, 95, legend = c("GreenFish", "BlueFish", "RedFish"), pch = 19, col = c("green", "blue", "red"), box.lty=0)
  CorrectAnswer: legend(1, 95, legend = c("GreenFish", "BlueFish", "RedFish"), pch = 19, col = c("green", "blue", "red"), box.lty=0) 
  AnswerTests: omnitest(correctExpr='legend(1, 95, legend = c("GreenFish", "BlueFish", "RedFish"), pch = 19, col = c("green", "blue", "red"), box.lty=0)')
  Hint: Type legend(1, 95, legend = c("GreenFish", "BlueFish", "RedFish"), pch = 19, col = c("green", "blue", "red"), box.lty=0)

- Class: text
  Output: So each point in the plot represents the abundance of one of the species (RedFish, GreenFish, BlueFish) for each record (you can count by yourself, it should have 26 points on your graph).

- Class: cmd_question
  Output: Then we can try to visualise more about Abundance. For example we can show the distribution of this univariate variable by creating a histogram. Write hist(reeffish$Abundance).
  CorrectAnswer: hist(reeffish$Abundance) 
  AnswerTests: omnitest(correctExpr='hist(reeffish$Abundance)')
  Hint: Type hist(reeffish$Abundance)
  
- Class: text
  Output: Congratulations! You should see a histogram on the Plots pane displaying the distribution of the Abundance values.

- Class: text
  Output: Now let's customize this graph!
  
- Class: cmd_question
  Output: Type hist(reeffish$Abundance, breaks = 5, col = "lightgreen", xlim=c(0,100), probability = TRUE)
  CorrectAnswer: hist(reeffish$Abundance, breaks = 5, col = "lightgreen", xlim=c(0,100), probability = TRUE) 
  AnswerTests: omnitest(correctExpr='hist(reeffish$Abundance, breaks = 5, col = "lightgreen", xlim=c(0,100), probability = TRUE)')
  Hint: Type hist(reeffish$Abundance, breaks = 5, col = "lightgreen", xlim=c(0,100), probability = TRUE)

- Class: cmd_question
  Output: And add lines(density(reeffish$Abundance), col = "red")
  CorrectAnswer: lines(density(reeffish$Abundance), col = "red") 
  AnswerTests: omnitest(correctExpr='lines(density(reeffish$Abundance), col = "red")')
  Hint: Type lines(density(reeffish$Abundance), col = "red")
  
- Class: text
  Output: Great! As you can see, we changed the number of breaks (5) by which our data are divided, the color of the bar, the limits of the x axis and we added a red line displaying the empirical density of the data.

- Class: text
  Output: Let's now have a look at the relation between a continous variable (Abundance) and a categorical one (Site).

- Class: cmd_question
  Output: To do that you should type boxplot(reeffish$Abundance ~ reeffish$Site)
  CorrectAnswer: boxplot(reeffish$Abundance ~ reeffish$Site)
  AnswerTests: omnitest(correctExpr='boxplot(reeffish$Abundance ~ reeffish$Site)')
  Hint: Type boxplot(reeffish$Abundance ~ reeffish$Site)
  
- Class: text
  Output: The boxplots are really good graphs to illustrate categorical variables as they show the mean (dark bar), the minimum and maximum values (both extremities of the dashed line), and the first and third quartiles (the lower and higher limit of the box).

- Class: text
  Output: Finally let's see how we can export the plot we created with R.

- Class: text
  Output: There are many possibilities and many formats to do so. Here we will only cover the .png and .jpeg files.

- Class: cmd_question
  Output: First we should create an object containing our plot. Let's type plot1 <- boxplot(reeffish$Abundance ~ reeffish$Site)
  CorrectAnswer: plot1 <- boxplot(reeffish$Abundance ~ reeffish$Site)
  AnswerTests: omnitest(correctExpr='plot1 <- boxplot(reeffish$Abundance ~ reeffish$Site)')
  Hint: Type plot1 <- boxplot(reeffish$Abundance ~ reeffish$Site)
  
- Class: cmd_question
  Output: Then we can export this plot under a .png format by entering png(filename = "plot1.png", width = 480, height = 480, units = "px")
  CorrectAnswer: png(filename = "plot1.png", width = 480, height = 480, units = "px") 
  AnswerTests: omnitest(correctExpr='png(filename = "plot1.png", width = 480, height = 480, units = "px")')
  Hint: Type png(filename = "plot1.png", width = 480, height = 480, units = "px")
    
- Class: cmd_question
  Output: Or for a .jpeg format enter jpeg(filename = "plot1.jpg", width = 480, height = 480, units = "px")
  CorrectAnswer: jpeg(filename = "plot1.jpg", width = 480, height = 480, units = "px")  
  AnswerTests: omnitest(correctExpr='jpeg(filename = "plot1.jpg", width = 480, height = 480, units = "px")')
  Hint: Type jpeg(filename = "plot1.jpg", width = 480, height = 480, units = "px")
   
- Class: text
  Output: We reached the end of this introductory course on data visualisation with R. Of course R has much more possibilities to visualise data.
  
- Class: figure
  Output: ....
  Figure: cleanup.R 
  
- Class: video
  Output: If you want to learn more about data visualisation you can have a look to the package ggplot2.
  VideoLink: https://ggplot2.tidyverse.org/
  
- Class: video
  Output: If you like this lessons and want to see all the code used for the lesson, you can have a look at the course repository
  VideoLink: https://github.com/IMBRSea-R-Working-Group/SummeR


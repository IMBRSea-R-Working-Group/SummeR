- Class: meta
  Course: imbrseaR
  Lesson: Data_Handling_part_2
  Author: Ulrike Braeckman, Stanley Nmor
  Type: Standard
  Organization: IMBRSea
  Version: 2.4.5

- Class: text 
  Output: In the previous lesson, you learned how to read in data in different formats (txt and csv) in R. That's great, but we can do better. In this tutorial, you will learn how to create simple data structures, operate on them, and perform basic subsetting.
  
- Class: text 
  Output: At the end, you should be able to do some basic data manipulation in R. Are you ready? 
  
- Class: text 
  Output: Now that you have our data read into R, you can do some manipulation. We will keep things simple so that you get the ideas/concepts easily.
  
- Class: text 
  Output: The first concept in data manipulation you will learn in R will be on how to create a SIMPLE VECTOR or sequence of numbers or character. 
  
- Class: text 
  Output: For example, if I tell you to list the first five numbers we have, how do you go about that in R? In this case, we are talking about a sequence of numbers right?
  
- Class: text 
  Output: R is simple enough that it provides us with what is called a sequence function named 'seq(from = , to = , by = )'. Between the parentheses, you can place whatever number you want. 
  
- Class: text 
  Output: Let's give a concrete example to see this in action, say you want to generate the first ten numbers - '1:10', you can do this by using the 'seq()' command.
  
- Class: cmd_question
  Output: Generate a number sequence '1' to '10' using 'seq(from = 1, to = 10, by = 1)' in the command line.
  CorrectAnswer: seq(from = 1, to = 10, by = 1)
  AnswerTests: any_of_exprs('seq(from = 1, to = 10, by = 1)', 'seq(0, 10, 1)') 
  Hint: The answer is in the question. 
  
- Class: cmd_question
  Output: Now generate a number sequence '10' to '100' using 'seq()' in the command line and assign the numbers to an object 'x'.
  CorrectAnswer: x <- seq(from = 10, to = 100, by = 1)
  AnswerTests: any_of_exprs('x = seq(from = 10, to = 100, by = 1)', 'x <- seq(from = 10, to = 100, by = 1)', 'x = seq(10, 100, 1)', 'x <- seq(10, 100, 1)') 
  Hint: The answer is in the question. 
  
- Class: text 
  Output: Alternatively, you can create this vector using ':' command between the numbers. Just type '1:10' and you get the same result as above! 

- Class: cmd_question
  Output: Generate number sequence '1' to '10' using ':' in the command line.
  CorrectAnswer: 1:10
  AnswerTests: omnitest(correctExpr = '1:10') 
  Hint: The answer is in the question. 
  
- Class: text 
  Output: The only reason you the need the 'seq()' is that you can modify how many steps you want from the sequence using the 'by =' argument. 
  
- Class: text 
  Output: For example, say you want to generate a number sequence '1' to '10' with increment of '2', meaning the numbers change 'by' 2. We can do that using 'seq(from = 1, to = 10, by = 2)'. Let's try that in the console. 
  
- Class: cmd_question
  Output: Generate number sequence '1' to '10' by an increment of '2'
  CorrectAnswer: seq(from = 1, to = 10, by = 2)
  AnswerTests: any_of_exprs('seq(from = 1, to = 10, by = 2)', 'seq(1, 10, 2)') 
  Hint: The answer is in the question. 
  
- Class: text
  Output: Now that you understand how to generate a sequence, let's learn how to generate strings with characters. A string/character is shown with the quotation symbol "< STRING >"
  
- Class: text
  Output: To create a character sequence in R you will have to manually write the string. You can do that using the 'c()' command wich means either 'concatenate' or simple 'create'. 
  
- Class: text
  Output: Say, for example you want to create a vector of marine species, Then you can use 'c("Whale", "Goby", "Ray", "Turtle")'. Let's create this in the console.
  
- Class: cmd_question
  Output: Generate a vector of marine species using 'c()' containing "Whale", "Goby", "Ray", "Turtle". Assign the object to 'marine_species'
  CorrectAnswer: marine_species <- c("Whale", "Goby", "Ray", "Turtle")
  AnswerTests: any_of_exprs('marine_species <- c("Whale", "Goby", "Ray", "Turtle")', 'marine_species = c("Whale", "Goby", "Ray", "Turtle")')
  Hint: The answer is in the question. 
  
- Class: text
  Output: Now, let's move to another useful data handling concept that is crucial in R. It is called INDEXING. 
  
- Class: text
  Output: Indexing is basically the way you get individual objects or a group of objects from a vector in R. Remember our 'marine_species' example. If you want to get only the first species from the object, how do you do that in R?
  
- Class: text
  Output: Well it turns out that R follows a simple pattern of Indexing which if you understand, can make your life easier. Let's put this into action and see if you can get the first object.
  
- Class: text
  Output: To index in R, you use the block parentheses '[]' in front of the object we want to index. For example 'marine_species[]'
  
- Class: text
  Output: Since we know the first ('1') animals is 'Whale' we can get that by typing the number '1' in between the block parentheses. Let's try that at the console prompt.
  
- Class: figure
  Output: See the illustrated concept in the plot viewer.
  Figure: number_index_illustrated.R

- Class: cmd_question
  Output: Get the first animal in the vector 'marine_species' using the '[]' and the number '1' inside the bracket.
  CorrectAnswer: marine_species[1]
  AnswerTests: omnitest(correctExpr = 'marine_species[1]') 
  Hint: The answer is in the question. 
  
- Class: cmd_question
  Output: Get the last animal - 'Turtle' in the vector 'marine_species' using the '[]' and the number '4' inside the bracket.
  CorrectAnswer: marine_species[4]
  AnswerTests: omnitest(correctExpr = 'marine_species[4]') 
  Hint: The answer is in the question.

- Class: text
  Output: Good job. You can even get two or more objects at the same time with method. For example, say we want the first and the last animal, then the index is 1 and 4.   
  
- Class: text
  Output: To that in R, we need to place these numbers in the 'c()' command for R to know that we are dealing with more than one index. So in this case, we use '[c(1,4)]'

- Class: cmd_question
  Output: Get the second and third animal - 'Goby' and 'Ray' in the vector 'marine_species' using the '[]' and the number corresponding to the animal.
  CorrectAnswer: marine_species[c(2,3)]
  AnswerTests: omnitest(correctExpr = 'marine_species[c(2,3)]') 
  Hint: Type the number inside the square parentheses '[]'. 
  
- Class: text
  Output: That will do for now. The next lesson will look at a new technique that will greatly improve your data handling skills - it is called "LOGICAL INDEXING".
